#Questão 1
#estamos assumindo que o usuario colocara um grafo não direcionado, ou seja se existe a o item a:['b', ...] no dicionario passado, então existe o item b:['a', ...]

def bfs(grafo:Grafo, vertice_inicial):
  resultado=[]
  k=vertice_inicial
  resultado.append(k)
  j=0
  while j<len(resultado):
    k = resultado[j]
    for i in grafo.pontos[k]:
      if i not in resultado:
        resultado.append(i)
    j+=1
  return resultado

if __name__ == '__main__':
  grafo=Grafo({'a':['b', 'd', 'e'], 'b':['a', 'c'], 'c':['b', 'd'], 'd':['a','c'], 'e':['a']})
  print(bfs(grafo, 'e'))


#Questão 2 

def busca_valor(G:Grafo, value:object, vertice_inicial):#função auxiliar
  resultado=[]
  j=0
  k=vertice_inicial
  resultado.append(k)
  while j<len(resultado):
    k = resultado[j]
    for i in grafo.pontos[k]:
      if i not in resultado:
        resultado.append(i)
      if G.get_vertex_value(i)==value:
        return i
    j+=1 

def busca_propriedade(G:Grafo, value:object): #começa do primeiro elemento do dicionario
  b = None
  for key in G.pontos.keys():
    b = key
    break
  return busca_valor(G, value, b)

if __name__ == '__main__':
  grafo=Grafo({'a':['b', 'd', 'e'], 'b':['a', 'c'], 'c':['b', 'd'], 'd':['a','c'], 'e':['a']})
  grafo.set_vertex_value('a', 2)
  grafo.set_vertex_value('b', 'oiii')
  print(busca_propriedade(grafo, 'oiii'))


#Questão 3

def conta_ilhas(matriz):
  visitados=[]
  def busca(x, y):
    directions=  [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]
    visitados.append((x,y))
    for dx, dy in directions:
      vx=x+dx
      vy=y+dy
      if (vx >= 0 and vx < len(matriz)) and ((vy >= 0 and vy < len(matriz[0]))) and (vx,vy) not in visitados and matriz[vx][vy]=='1':
        busca(x + dx, y + dy)
      

  n_de_ilhas=0

  for i in range(len(matriz)):
    for j in range(len(matriz[0])):
      if matriz[i][j] == '1' and (i,j) not in visitados:
        busca(i, j)
        n_de_ilhas += 1

  return n_de_ilhas

def read_matrix_from_file(file_path):
    with open(file_path, 'r') as file:
        matrix = []
        for line in file:
            row = list(line.strip())  
            matrix.append(row)
    return matrix


def main(file_path):
    matrix = read_matrix_from_file(file_path)
    
    island_count = conta_ilhas(matrix)
    
    print(f'O número de ilhas é: {island_count}')

file_path = 'test_map.txt'
main(file_path)

#Questão 5

def conta_lagos(matriz):
    visitados = []
    
    def busca(x, y):
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        visitados.append((x, y))
        for dx, dy in directions:
            vx, vy = x + dx, y + dy
            if 0 <= vx < len(matriz) and 0 <= vy < len(matriz[0]) and (vx, vy) not in visitados and matriz[vx][vy] == '0':
                busca(vx, vy)

    for i in range(len(matriz)):
        for j in [0, len(matriz[0])-1]:
            if matriz[i][j] == '0' and (i, j) not in visitados:
                busca(i, j)

    for j in range(len(matriz[0])):
        for i in [0, len(matriz)-1]: 
            if matriz[i][j] == '0' and (i, j) not in visitados:
                busca(i, j)

    n_de_lagos = 0
    for i in range(len(matriz)):
        for j in range(len(matriz[0])):
            if matriz[i][j] == '0' and (i, j) not in visitados:
                busca(i, j)  
                n_de_lagos += 1

    return n_de_lagos
matriz = [
    ['1', '1', '1', '0', '1'],
    ['1', '0', '0', '0', '1'],
    ['1', '0', '1', '0', '1'],
    ['1', '1', '1', '1', '1']
]

print(conta_lagos(matriz))


